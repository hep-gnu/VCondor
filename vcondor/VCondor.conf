#
# A sample configuration file for the VCondor.
#


[global]


# EnableToRun is the option that whether you want VCondor to run in your cluster or not.
#       You must set it to true before you start VCondor. When VCondor is working and 
#       EnableToRun option is false,it will be determined peacefully in a few minutes. 
EnableToRun: true

# Timeout is the longest waiting time(seconds) for virtual machines to start. The default 
#       value is 600 seconds. For example, if a VM cannot start successfully and be added 
#       to condor pool in 600 seconds, VCondor think there is something wrong with the VM
#       and shut the VM down.
Timeout: 600

# VmSchedule_interval is the number of seconds between VM scheduling cycles. Increasing 
#       this value will lower the load on the system, and decreasing it will improve 
#       responsiveness. The default value is 600 seconds.
VmSchedule_interval: 600


[VMQuota]


# VCondor needs to work together with VMQuota. VMQuota is the component which controls
#       resource quotas of experiment groups. You must set Ip and Port of VMQuota first 
#       before you start VCondor.
Ip: 127.0.0.1


# VCondor needs to work together with VMQuota. VMQuota is the component which controls
#       resource quotas of experiment groups. You must set Ip and Port of VMQuota first 
#       before you start VCondor.
Port: 27020


# Authentication for opennebula cluster.
[opennebula]

Authentication method: basic
EndPoint: 
Username: 
Password: 

# Authentication for openstack cluster.
[openstack]

OS_USERNAME: ""   
OS_PASSWORD: ""   
OS_AUTH_URL: ""   
OS_TENANT_NAME: ""
availability_zone: ""

[logging]


# log_level specifies how much information from VCondor to log. 
#            
#       Choose from  DEBUG, INFO, WARNING, ERROR and CRITICAL
#       The default is INFO
# 
#       WARNING!!! - DO NOT USE JOBS OR DEBUG WITH VERY LARGE NUMBERS OF JOBS
log_level: INFO


# log_ file specifies where to put the VCondor log file. If left
#       blank, logging will just be sent to standard out
# 
#       The default is None
log_file: ./VCondor.log


#   The default is "%(asctime)s - %(levelname)s - %(module)s - %(message)s", 
#       which yields messages like the following:
#       "2016-07-13 11:02:08,722 - DEBUG - VCondorMain - message"
log_format: '%(asctime)s  [%(levelname)s] : %(module)s - %(message)s'


# log_max_size is the maximum filesize in Bytes for your log file.
# 
#       The default is unlimited file size. This allows you to use logrotate
#       if you prefer to use it to manage the rotation of your log files.
log_max_size: 2097152


# In VCondor, Resource_group is a set of cluster user groups who 
#       use the same image to boot their VMs. For example, Resource_group 'LHAASO'
#       includes user group 'lhaaso' and 'lhaasorun' of IHEPCloud.
#       They both use the image 'WN-LHAASO-40G' to boot their VMs and get jobs running.
#
#       The configuration file of condor_startd daemon - 
#       'STARTD.conf' in VMs must be configured like that:
#
#       Start = ( TARGET.AcctGroup =?= "lhaaso" || TARGET.AcctGroup =?= "lhaasorun" )
#                                                                                    
#       So the VM is able to run jobs of user group lhaaso or
#       lhaasorun.
#
#       Resource_group_str is a string such as 'lhaaso|lhaasorun'.
#       It contains a set of cluster user groups who use the same 
#       image to boot their VMs like lhaaso and lhaasorun group.
#
#       Group-Level-Map-Relations defines relationships between condor_pool_name and user_group_name
#       , such as 'LHAASO: lhaaso,lhaasorun'. 
[Group-Level-Map-Relations]

#condor_pool_name: user_group_name
cctest: cctest


# For each resource_group the config file must have a appropriate section, such as 
#       LHAASO,cctest etc. Some options must be configured including 'condor_retrieval_method'
#       ,'condor_q_command','condor_status_command','condor_status_shortcmd'
[cctest]

# condor_retrieval_method is the method by which VCondor gets job and resource data. 
#       VCondor use this data to determine how many VMs to boot or how many VMs to delete
#       for a experiment group. The local method simply runs the equivalent of 
#       'condor_q -l' or 'condor_status -l' at the command line. If you like, you can 
#       change the command that VCondor runs, for example, if your central manager is on 
#       a different machine, you can make the command something like 
#       'ssh condor.your.org condor_status -l'. This depends on the condor_q_command 
#       and the condor_status_command options of different group section in this file.
#       
#       The default is local
#
condor_retrieval_method: local


# condor_q_command this is the command that VCondor runs to get Condor job data. If you 
#       like, you can change the command that VCondor runs, for example, if your central 
#       manager is on a different machine, you can make the command something like 
#                   'ssh condor.your.org condor_q -l'.
# 
#      The default value is 'condor_q -l |grep '^$|Owner\|AcctGroup\|GlobalJobId\|JobPrio
#      \|JobStatus\|RemoteHost\|JobStartDate\|ServerTime''
condor_q_command: ssh condor.your.org "condor_q -pool pool.condor.your.org -name schedd.condor.your.org -l |grep '^$\|Owner\|AcctGroup\|GlobalJobId\|JobPrio\|JobStatus\|RemoteHost\|JobStartDate\|ServerTime'"


# condor_status_command this is the command that VCondor runs to get Condor machine data. 
#       If you like, you can change the command that Cloud scheduler runs, for example, 
#       if your central manager is on adifferent machine, you can make the command 
#       something like 
#                   'ssh condor.your.org condor_status -l'.
# 
#       The default value is 'condor_status -l|'grep '^$\|^Machine =\|^HardwareAddress =
#       \|^MyAddress =\|^Activity =\|^Name =\|^Start =\|^AccountingGroup =\|^RemoteOwner =
#       \|^RemoteUser =\|^JobId =\|^GlobalJobId =''
condor_status_command: ssh condor.your.org "condor_status -pool pool.condor.your.org  -l |grep '^$\|^Machine =\|^HardwareAddress =\|^MyAddress =\|^Activity =\|^Name =\|^Start =\|^AccountingGroup =\|^RemoteOwner =\|^RemoteUser =\|^JobId =\|^GlobalJobId ='"


# condor_status_shortcmd this is the simplified version of condor_status_command. It 
#       doesn't include the 'grep' command which aims to reduce the condor_status_command
#       output. 
#
#       And it doesn't include the '-l' option of command 'condor_status'.
#
#       The default value is 'condor_status'
condor_status_shortcmd: ssh condor.your.org "condor_status -pool pool.condor.your.org"



# In cloud cluster you must configure VM image/os_tpl for each 
#       resource_group. The format is '[resource_group]: [Image UUID/os_tpl UUID].
[Image]

cctest: uuid_wn_cctest_64


# In cloud cluster you must configure VM flavor/resource_tpl for 
#       each resource_group. The format is '[resource_group]: [flavor UUID/resource_tpl UUID].
[Flavor]

cctest: small

# In opennebula cluster, VM network is configured in VM template.


# Json Format which exchanged by VCondor and VMQuota. It shall not be modified unless
#       you have read the VCondor and VMQuota code carefully.
[JSONFormatCheck-SentToQuotaControl]

FormatKeysList: ResID

ResID: str


# Json Format which exchanged by VCondor and VMQuota. It shall not be modified unless
#       you have read the VCondor and VMQuota code carefully.
[JSONFormatCheck-RecvFromQuotaControl]

FormatKeysList: ResID,MIN,AVAILABLE

ResID: unicode

MIN: int

AVAILABLE: int

